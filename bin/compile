#!/usr/bin/env bash

# Copyright 2012 cloudControl GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# bin/compile <build-dir> <cache-dir>

set -eo pipefail

indent_head() {
    sed -u "s/^/-----> /"
}

indent() {
    sed -u "s/^/       /"
}

# parameters: $ABSOLUTE_DIR
function clean_directory() {
    rm -rf $1
    mkdir $1
}

BIN_DIR=$(readlink -f $(dirname $0))
BP_DIR=$(readlink -f $(dirname $BIN_DIR))
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

export CACHE_DIR

APACHE_PATH="$BUILD_DIR/apache"
PHP_PATH="$BUILD_DIR/php"

CODE_DIR=code
PROJECT_ROOT=$BUILD_DIR/$CODE_DIR

cd $BUILD_DIR

# Load buildpack environment
if [[ -f .buildpack/envrc ]]; then
    source .buildpack/envrc
fi

# Load some convenience functions like status(), echo(), and indent()
source $BP_DIR/bin/common.sh

status "Writing profile script"
status HOME: $HOME
status PATH: $PATH

mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_dpkg.sh
    export PATH="\$HOME/code/vendor/node/bin:\$HOME/bin:\$HOME/code/node_modules/.bin:\$HOME/.dpkg/usr/bin:\$PATH"
    export LD_LIBRARY_PATH="\$HOME/.dpkg/usr/lib:\$LD_LIBRARY_PATH"
    export LD_LIBRARY_PATH="\$HOME/.dpkg/usr/lib/x86_64-linux-gnu:\$LD_LIBRARY_PATH"
    export LD_LIBRARY_PATH="\$HOME/.dpkg/lib:\$LD_LIBRARY_PATH"
    export LD_LIBRARY_PATH="\$HOME/.dpkg/lib/x86_64-linux-gnu:\$LD_LIBRARY_PATH"
    export LD_LIBRARY_PATH="\$HOME/.dpkg/lib64:\$LD_LIBRARY_PATH"
    export INCLUDE_PATH="\$HOME/.dpkg/usr/include:\$INCLUDE_PATH"
    export CPATH="\$INCLUDE_PATH"
    export CPPPATH="\$INCLUDE_PATH"
EOF

export HOME=$BUILD_DIR
source $HOME/.profile.d/000_dpkg.sh

# Ruby
/usr/bin/env ruby <<EOF
    # sync output
    \$stdout.sync = true

    \$:.unshift File.expand_path("$BP_DIR/support/ruby/lib", __FILE__)
    require "language_pack"

    LanguagePack::Instrument.trace 'compile', 'app.compile' do
      if pack = LanguagePack.detect("$BUILD_DIR", "$CACHE_DIR")
        pack.log("compile") do
          pack.compile
        end
      end
    end
EOF

export GEM_PATH=$BUILD_DIR/code/vendor/bundle/ruby/2.0.0
export LC_ALL="en_US.UTF-8"
export LANG="en_US.UTF-8"

# node (from cloudcontrol official node buildpack)
if [[ -f $BUILD_DIR/package.json ]]; then
    # Output npm debug info on error
    trap cat_npm_debug_log ERR

    # Look in package.json's engines.node field for a semver range
    semver_range=$(cat $BUILD_DIR/package.json | $BP_DIR/support/jq -r .engines.node)

    # Resolve node version using semver.io
    node_version=$(curl --silent --get --data-urlencode "range=${semver_range}" https://semver.io/node/resolve)

    # Recommend using semver ranges in a safe manner
    if [ "$semver_range" == "null" ]; then
      protip "Specify a node version in package.json"
      semver_range=""
    elif [ "$semver_range" == "*" ]; then
      protip "Avoid using semver ranges like '*' in engines.node"
    elif [ ${semver_range:0:1} == ">" ]; then
      protip "Avoid using semver ranges starting with '>' in engines.node"
    fi

    # Output info about requested range and resolved node version
    if [ "$semver_range" == "" ]; then
      status "Defaulting to latest stable node: $node_version"
    else
      status "Requested node range:  $semver_range"
      status "Resolved node version: $node_version"
    fi


    if [ -d $BUILD_DIR/vendor/node/node-v$node_version-linux-x64 ]; then
        status "Node is in the building"
    else
        status "Downloading and installing node"
        node_url=http://nodejs.org/dist/v$node_version/node-v$node_version-linux-x64.tar.gz
        curl $node_url -s -o - | tar xzf - -C $BUILD_DIR

        # Move node (and npm) into ./vendor and make them executable
        mkdir -p $BUILD_DIR/vendor
        mv $BUILD_DIR/node-v$node_version-linux-x64 $BUILD_DIR/vendor/node
    fi

    chmod +x $BUILD_DIR/vendor/node/bin/*
    PATH=$BUILD_DIR/vendor/node/bin:$PATH

    # Run subsequent node/npm commands from the build path
    cd $BUILD_DIR

    # If node_modules directory is checked into source control then
    # rebuild any native deps. Otherwise, restore from the build cache.
    if test -d $BUILD_DIR/node_modules; then
      status "Found existing node_modules directory; skipping cache"
      status "Rebuilding any native dependencies"
      npm rebuild 2>&1 | indent
    elif test -d $CACHE_DIR/node/node_modules; then
      status "Restoring node_modules directory from cache"
      cp -r $CACHE_DIR/node/node_modules $BUILD_DIR/

      status "Pruning cached dependencies not specified in package.json"
      npm prune 2>&1 | indent

      if test -f $CACHE_DIR/node/.paasprovider/node-version && [ $(cat $CACHE_DIR/node/.paasprovider/node-version) != "$node_version" ]; then
        status "Node version changed since last build; rebuilding dependencies"
        npm rebuild 2>&1 | indent
      fi

    fi

    # Scope config var availability only to `npm install`
    (
      if [ -d "$ENV_DIR" ]; then
        status "Exporting config vars to environment"
        export_env_dir $ENV_DIR
      fi

      status "Installing dependencies"
      # Make npm output to STDOUT instead of its default STDERR
      npm install --userconfig $BUILD_DIR/.npmrc --production 2>&1 | indent
    )

    # Persist goodies like node-version in the slug
    mkdir -p $BUILD_DIR/.paasprovider

    # Save resolved node version in the slug for later reference
    echo $node_version > $BUILD_DIR/.paasprovider/node-version

    # Purge node-related cached content, being careful not to purge the top-level
    # cache, for the sake of heroku-buildpack-multi apps.
    rm -rf $CACHE_DIR/node_modules # (for apps still on the older caching strategy)
    rm -rf $CACHE_DIR/node
    mkdir -p $CACHE_DIR/node

    # If app has a node_modules directory, cache it.
    if test -d $BUILD_DIR/node_modules; then
      status "Caching node_modules directory for future builds"
      cp -r $BUILD_DIR/node_modules $CACHE_DIR/node
    fi

    # Copy goodies to the cache
    cp -r $BUILD_DIR/.paasprovider $CACHE_DIR/node

    status "Cleaning up node-gyp and npm artifacts"
    rm -rf "$BUILD_DIR/.node-gyp"
    rm -rf "$BUILD_DIR/.npm"
fi


# move everything in BUILD_DIR except buildpack-specific files to PROJECT_ROOT
TMP=$(mktemp -d --tmpdir=.)
find . -mindepth 1 -maxdepth 1 -not -regex "./Procfile\|$TMP\|./.buildpack" -exec mv --target-directory="$TMP" '--' '{}' +
mv "$TMP" "$PROJECT_ROOT"
ln -s code www

mkdir -p $APACHE_PATH/logs
mkdir -p $APACHE_PATH/conf/{share,local,user}
mkdir -p $PHP_PATH/{box,conf,logs}

cp $BP_DIR/support/boot.sh .

if [[ -f $PROJECT_ROOT/composer.json ]]; then
    COMPOSER_CACHE_DIR=$CACHE_DIR/composer
    
    # Caching: pre-install
    CACHED_DIRS=$(cat $PROJECT_ROOT/composer.json | jq -e -r '.config["vendor-dir"]') || CACHED_DIRS="vendor"

    mkdir -p $CACHE_DIR/composer
    for dir in $CACHED_DIRS; do
        if [[ -e $PROJECT_ROOT/$dir ]]; then
            cp -R $PROJECT_ROOT/$dir $COMPOSER_CACHE_DIR/ &> /dev/null || true
        fi
        cp -R $COMPOSER_CACHE_DIR/$dir $PROJECT_ROOT/ &> /dev/null || true
    done

    # Install composer
    if [[ ! -f $PROJECT_ROOT/composer.phar ]]; then
        curl --remote-name --silent https://getcomposer.org/installer
        php installer --quiet --install-dir=$PROJECT_ROOT
    fi

    php $PROJECT_ROOT/composer.phar install $COMPOSER_INSTALL_ARGS -n -d $PROJECT_ROOT/ | indent

    # Clean the Image
    rm $PROJECT_ROOT/composer.phar

    # Caching: post-install
    for dir in $CACHED_DIRS; do
        if [[ -e $COMPOSER_CACHE_DIR/${dir##*/} ]]; then
            rm -rf $COMPOSER_CACHE_DIR/${dir##*/}
        fi

        cp -R $PROJECT_ROOT/$dir $COMPOSER_CACHE_DIR/
    done
fi

if [[ $PAAS_VENDOR = "cloudControl" ]]; then
    PROJECT_CCCONFIG=$PROJECT_ROOT/.ccconfig.yaml

    TMP=$(grep -E -o 'WebContent.*[^[:space:]]' $PROJECT_CCCONFIG 2>/dev/null | sed 's/WebContent *: *//' || echo "")
    if [[ TMP ]]; then
        WEBCONTENT="$TMP"
    fi
fi

# Framework detection
pushd $PROJECT_ROOT &> /dev/null
FRAMEWORK=$($BIN_DIR/detect $PROJECT_ROOT)

case $FRAMEWORK in

"PHP/Symfony1")
    echo "Symfony 1.x detected" | indent_head
    WEBCONTENT=${WEBCONTENT:-'web'}
    cp $BP_DIR/conf/symfony1.x.conf $APACHE_PATH/conf/share/50-symfony1.x.conf
    clean_directory cache
    ;;
"PHP/Symfony2")
    echo "Symfony 2.x detected" | indent_head
    WEBCONTENT=${WEBCONTENT:-'web'}
    clean_directory app/cache
    clean_directory app/logs
    ;;
"PHP/Zend1")
    echo "Zend 1.x Framework detected" | indent_head
    WEBCONTENT=${WEBCONTENT:-'public'}
    ;;
"PHP/Zend2")
    echo "Zend 2.x Framework detected" | indent_head
    WEBCONTENT=${WEBCONTENT:-'public'}
    ;;
"PHP/Yii")
    echo "Yii Framework detected" | indent_head
    for d in $(find . -maxdepth 1 -type d); do
        if [[ -f $d/index.php && -d $d/protected ]]; then
            webroot="$d"
        fi
    done
    WEBCONTENT=${WEBCONTENT:-$webroot}
    if [[ ! "$WEBCONTENT" ]]; then
        echo "ERROR: Failed to auto-detect web content." | indent
        exit 1
    fi
    if [[ ! -d $WEBCONTENT/protected/runtime ]]; then
        echo "Required directory missing, creating '$WEBCONTENT/protected/runtime'." | indent
        mkdir $PROJECT_ROOT/$WEBCONTENT/protected/runtime
    fi
    if [[ ! -d $WEBCONTENT/assets ]]; then
        echo "Required directory missing, creating '$WEBCONTENT/assets'." | indent
        mkdir $WEBCONTENT/assets
    fi
    ;;
"PHP/Kohana")
    echo "Kohana Framework detected" | indent_head
    WEBCONTENT=${WEBCONTENT:-''}
    clean_directory application/cache
    clean_directory application/logs
    ;;
"PHP/CakePhp")
    echo "CakePhp Framework detected" | indent_head
    if [[ ! -f app/Config/core.php ]]; then
        echo "ERROR: in order to run your application you need the configuration file. Please check your .gitignore file." | indent
        exit 1
    fi
    clean_directory app/tmp
    # this is the origin folder structure, that should be created
    # app/tmp/
    # ├── cache
    # │   ├── models
    # │   ├── persistent
    # │   └── views
    # ├── logs
    # ├── sessions
    # └── tests
    mkdir -p app/tmp/{logs,cache,sessions,tests}
    mkdir -p app/tmp/cache/{models,persistent,views}
    ;;
*)
    WEBCONTENT=${WEBCONTENT:-''}
    ;;
esac

popd &> /dev/null

if [[ $PAAS_VENDOR = "cloudControl" ]]; then
    # compatibility for luigi stack
    if [[ ! -f "$PROJECT_CCCONFIG" ]]; then
        echo -e "BaseConfig:\n  WebContent: /$WEBCONTENT" > $PROJECT_CCCONFIG
    fi
fi

# set default values if not defined in user custom configuration files
if ! grep -q -s "DocumentRoot" .buildpack/apache/conf/*.conf ; then
    DOCUMENT_ROOT="/app/code/$WEBCONTENT"
    echo "DocumentRoot \"$DOCUMENT_ROOT\"" > $APACHE_PATH/conf/share/documentroot.conf
    cat >> $APACHE_PATH/conf/share/documentroot.conf <<EOF
<Directory "$DOCUMENT_ROOT">
    AllowOverride All
    Options SymlinksIfOwnerMatch
    Order Deny,Allow
    Allow from All
    DirectoryIndex index.php index.html index.htm
</Directory>
EOF
fi

if [ -f .buildpack/php-fpm/conf/php-fpm.ini ]; then
    php $BP_DIR/support/merge_conf.php $BP_DIR/conf/php-fpm.ini .buildpack/php-fpm/conf/php-fpm.ini $PHP_PATH/php-fpm.ini
else
    cp $BP_DIR/conf/php-fpm.ini $PHP_PATH
fi

cp $BP_DIR/conf/php.ini $PHP_PATH/conf/010_php.ini

for f in /etc/php5/conf.d/*.ini; do
    cp $f $PHP_PATH/conf/000_`basename $f`;
done

if [ -d .buildpack/php/conf ]; then
    cp .buildpack/php/conf/*.ini $PHP_PATH/conf/
fi

cp $BP_DIR/conf/httpd.conf $APACHE_PATH/conf
if [ -d .buildpack/apache/conf ]; then
    cp .buildpack/apache/conf/* $APACHE_PATH/conf/user
fi

if [[ $PAAS_VENDOR = "cloudControl" ]]; then
    echo "[APC]" > $PHP_PATH/conf/cctrl_apc.ini
    grep -E -o 'apc.*[^[:space:]]' $PROJECT_CCCONFIG | sed 's/apcEnabled/apc.enabled/;s/apcShmSize/apc.shm_size/;s/apcStat/apc.stat/;s/:/ =/' >> $PHP_PATH/conf/cctrl_apc.ini || rm $PHP_PATH/conf/cctrl_apc.ini
fi


# DPKG

if [ -f .buildpack/Debfile ]; then
    DPKG_CACHE_DIR="$CACHE_DIR/dpkg/cache"

    if [ -d $DPKG_CACHE_DIR ]; then
        echo "DPKG cache directory exists. Removing $DPKG_CACHE_DIR"
        rm -rf $DPKG_CACHE_DIR
    fi

    mkdir -p $DPKG_CACHE_DIR

    for URL in $(cat .buildpack/Debfile); do
      if [ -f $DPKG_CACHE_DIR/`basename $URL` ]; then
        echo "Loading cached $URL"
      else
        echo "Fetching $URL"
        curl -L -o $DPKG_CACHE_DIR/`basename $URL` $URL
      fi
    done

    mkdir -p $BUILD_DIR/.dpkg

    for DEB in $(ls -1 $DPKG_CACHE_DIR/*.deb); do
      echo "Installing $(basename $DEB)"
      dpkg -x $DEB $BUILD_DIR/.dpkg/
    done
fi

# custom shell scripts
if [ -d .buildpack/sh ]; then
    for f in .buildpack/sh/*; do
        $f;
    done
fi

